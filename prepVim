#!/usr/bin/perl
# prepVim
# Script that downloads and installs all vim plugins I use
# Copyright (C) Eskild Hustvedt 2010
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict;
use warnings;
use File::Path qw(mkpath);
use File::Basename qw(basename dirname);
use File::Copy qw(move);
use Fatal qw(chdir mkpath);

# Alter this to suit your liking.
# 
# You can either set url=> to a fully qualified URL on where to get the plugin,
# or you can set vimOrgId=>, in which case prepVim will download from
# http://www.vim.org/scripts/download_script.php?src_id=[VIMORGID]
my %plugins = (
	'perl-syntax' => {
		type     => 'git',
		url      => 'https://github.com/rkitover/perl-vim-mxd.git',
	},
	'indentAnything' => {
		type     => 'tar.gz',
		vimOrgId => 10228,
	},
	'icalendar' => {
		type     => 'raw',
		target   => 'syntax/icalendar.vim',
		vimOrgId => 5573,
	},
	'gettext-po' => {
		type     => 'raw',
		target   => 'ftplugin/po.vim',
		vimOrgId => 4159,
	},
	'vim-markdown' => {
		type => 'git',
		url  => 'http://github.com/tpope/vim-markdown.git',
	},
	'taglist' => {
		type     => 'zip',
		vimOrgId => 7701,
		# This ensures we skip installation if ctags-exuberant isn't installed
		depsCheck   => sub {
			return 'exuberant ctags is not installed' if not InPath('ctags-exuberant');
		},
	},
	'vim-mason' => {
		type  => 'raw',
		multi => [
			{
				target => 'syntax/oldperl.vim',
				url    => 'http://github.com/zerodogg/scriptbucket/raw/master/trivial/vim-mason/oldperl.vim',
			},
			{
				target => 'syntax/mason.vim',
				url    => 'http://github.com/zerodogg/scriptbucket/raw/master/trivial/vim-mason/mason.vim',
			}
		]
	},
	'javascript-syntax' => {
		type     => 'raw',
		vimOrgId => 10728,
		target   => 'syntax/javascript.vim',
	},
	'javascript-indent' => {
		type   => 'raw',
		# This is only available on the vim wiki (http://vim.wikia.com/wiki/Improved_Javascript_Indent_script_for_Vim)
		# so I have mirrored the script file itself so that it can be installed by prepVim
		url    => 'http://zarb.org/~zerodogg/mirrored/javascript.vim',
		target => 'indent/javascript.vim',
	},
	'align' => {
		type     => 'vimball',
		vimOrgId => 10110,
	},
	'vim-git' => {
		type => 'git',
		url => 'http://github.com/tpope/vim-git.git'
	},
	'snipmate' => {
		type => 'git',
		url => 'http://github.com/msanders/snipmate.vim.git',
		postRun => sub
		{
			# I don't like some of the default snippets, so fetch alternate ones
			get('http://zarb.org/~zerodogg/snipmate/javascript.snippets','snipmate/snippets/javascript.snippets',1);
			get('http://zarb.org/~zerodogg/snipmate/perl.snippets','snipmate/snippets/perl.snippets',1);
		},
	},
	'supertab' => {
		type => 'git',
		url => 'http://github.com/ervandew/supertab.git',
	},
	'MRU' => {
		type => 'raw',
		vimOrgId => 11919,
		target => 'plugin/MRU.vim',
	},
	'html5' => {
		type => 'tar.gz',
		vimOrgId => 13783,
	},
	'vimoutliner' => {
		url => 'https://github.com/downloads/vimoutliner/vimoutliner/vimoutliner-0.3.6.tgz',
		type => 'tar.gz'
	},
);

# We need $HOME
die("HOME not set\n") if not $ENV{HOME};

# Validate deps
foreach my $d (qw(git wget unzip tar gunzip vim))
{
	die("Dependency missing, please install $d\n") if not InPath($d);
}

# Prepare initial directories
my $bundleDir = $ENV{HOME}.'/.vim/bundle';
needDir($bundleDir);
needDir($ENV{HOME}.'/.vim/autoload');
chdir($ENV{HOME}.'/.vim');

# Install pathogen
print "Fetching prerequisite: pathogen\n";
unlink('./autoload/pathogen.vim') if -e './autoload/pathogen.vim';
get('http://www.vim.org/scripts/download_script.php?src_id=12116','./autoload/pathogen.vim');

# Install all other plugins listed in the %plugins hash
foreach my $plugin (sort keys(%plugins))
{
	installPlugin($plugin,$plugins{$plugin});
}

print "\nAll plugins successfully installed.\n";
$| = 1;
# Generate helptags
print "Running pathogen#helptags() in vim to generate helptags...";
system('vim','-c',':call pathogen#runtime_append_all_bundles()','-c',':call pathogen#helptags()','-c',':q!');
print "done\n";
# Output a message if .vimrc isn't using pathogen.
# Yes, I know using grep is ugly - but I'm lazy, so there.
if (system('grep','-q','pathogen#runtime_append_all_bundles',$ENV{HOME}.'/.vimrc') != 0)
{
	print "NOTE: Remember to add \"silent! call pathogen#runtime_append_all_bundles()\"\n";
	print "      to the start of your ~/.vimrc\n";
}
exit(0);

# Purpose: Retrieve a file using wget.
# Can be supplied with an integer instead of a URL, in which case it will resolve it
# to fetch from vim.org
sub get
{
	my $url = shift;
	my $outfile = shift;
	my $fetchFresh = shift;
	my @params = qw(wget --no-check-certificate --no-verbose --random-wait --retry-connrefused -t 0);
	if(not $fetchFresh)
	{
		push(@params,'-c');
	}
	die('get() got undef url!') if not defined $url;
	system(@params,'-O',$outfile,$url);
	die("Download failed\n") if not -e $outfile;
}

# Purpose: Recreate a directory
sub needFreshDir
{
	my $dir = shift;
	rmDirTree($dir);
	needDir($dir);
}

# Purpose: Remove a directory tree if it exists
sub rmDirTree 
{
	my $dir = shift;
	system('rm','-rf',$dir)
		if (-e $dir);
}

# Purpose: Create a directory if it doesn't exists
sub needDir
{
	my $dir = shift;
	if(not -e $dir)
	{
		mkpath($dir);
	}
}

# Usage: InPath(command)
sub InPath
{
	foreach (split /:/, $ENV{PATH}) { if (-x "$_/@_" and ! -d "$_/@_" ) {   return 1; } } return 0;
}

# Purpose: Run a system() in a child (silencing it without using /bin/sh)
sub SilentSystem
{
	no warnings;
	open(STDOUT_SAVED,'>&STDOUT');
	open(STDERR_SAVED,'>&STDERR');
	open(STDOUT,'>','/dev/null');
	open(STDERR,'>','/dev/null');
	my $ret = system(@_);
	$ret = $ret >> 8;
	open(STDOUT,'>&STDOUT_SAVED');
	open(STDERR,'>&STDERR_SAVED');
	use warnings;
	return($ret);
}

# Purpose: Install a plugin, will call other installPlugin_ functions as needed
sub installPlugin
{
	my $plugin = shift;
	my $info = shift;
	if(defined $info->{depsCheck})
	{
		if(my $error = $info->{depsCheck}->())
		{
			print "NOTE: Skipping \"$plugin\": missing dependencies: $error\n";
			return;
		}
	}
	print "Installing: $plugin\n";
	if ($info->{vimOrgId})
	{
		$info->{url} = 'http://www.vim.org/scripts/download_script.php?src_id='.$info->{vimOrgId};
	}
	# Older versions of git can't clone into an existing directory, so let git
	# create it itself.
	if ($info->{type} ne 'git')
	{
		chdir($bundleDir);
		needFreshDir($bundleDir.'/'.$plugin);
		chdir($plugin);
	}

	if ($info->{type} eq 'git')
	{
		installPlugin_git($plugin,$info);
	}
	elsif($info->{type} eq 'raw')
	{
		installPlugin_raw($plugin,$info);
	}
	elsif($info->{type} eq 'vimball')
	{
		installPlugin_vimball($plugin,$info);
	}
	else
	{
		my $out = $bundleDir.'/'.$plugin.'/file.out';
		unlink($out) if -e $out;
		get($info->{url},$out);
		if ($info->{type} eq 'zip')
		{
			system('unzip','-q',$out) and die();
		}
		elsif($info->{type} eq 'tar.gz')
		{
			move($out,'plugin.tar.gz');
			system('tar','-zxf','plugin.tar.gz') and die();
		}
		elsif($info->{type} eq 'vimball')
		{
			installPlugin_vimball($plugin,$info,$out);
		}
		unlink($out);
	}
	if ($info->{postRun})
	{
		$info->{postRun}->();
	}
	chdir('..');
}

# Purpose: Install a plugin using git
sub installPlugin_git
{
	my $plugin = shift;
	my $info = shift;
	chdir($bundleDir);
	rmDirTree('./'.$plugin);
	system('git','clone','--depth',1,'-q',$info->{url},'./'.$plugin) and die("git failed to clone the repository.\n");
    print "Made a shallow clone of ".$info->{url}."\n";
}

# Purpose: Install a 'raw' plugin (ie. not archived or git)
sub installPlugin_raw
{
	my $plugin = shift;
	my $info = shift;
	my @files;
	if ($info->{multi})
	{
		@files = @{$info->{multi}};
	}
	else
	{
		@files = ( $info );
	}
	foreach my $f (@files)
	{
		my $out = $f->{target};
		needDir(dirname($out));
		get($f->{url},$out);
	}
}

# Purpose: Install a "vimball"
sub installPlugin_vimball
{
	my $name   = shift;
	my $info   = shift;
	my $outDir = $bundleDir.'/'.$name;
	my $vimVer = qx(vim --version|grep "VIM - Vi IMproved"|perl -pi -e 's/^\\D+//; s/\\s+.*//g;');
	my $majVer = $vimVer;
	my $miVer  = $vimVer;
	$majVer    =~ s/^(\d+)\..*/$1/;
	$miVer     =~ s/^.+\.(\d+)$/$1/;

	if ($majVer < 7 || ($majVer == 7 && $miVer < 2))
	{
		print "vimball unsupported in your vim version - skipping installation\n";
		return;
	}

	print "(note: $name is a vimball, screen might flicker during install)\n";

	unlink($outDir.'/vimball.vba.gz') if -e $outDir.'/vimball.vba.gz';
	get($info->{url},$outDir.'/vimball.vba.gz');

	# We don't /know/ if it's a gzip file, so we just try to gunzip it.
	# If it fails, it's not a gzip file - and we can just go on processing
	# it anyway.
	SilentSystem('gunzip','-q',$outDir.'/vimball.vba.gz');
	move($outDir.'/vimball.vba.gz',$outDir.'/vimball.vba') if -e $outDir.'/vimball.vba.gz';

	my $target = $bundleDir.'/'.$name;
	system('vim','-c',':let g:vimball_home="'.$target.'"','-c',':so %','-c',':q!',$outDir.'/vimball.vba');
	unlink($outDir.'/vimball.vba');
}
